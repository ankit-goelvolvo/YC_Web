@model YCWeb.Data.Office

@{
    Layout = null;
}
@{
    var data = ((DateTime)@Model.CreatedDate).ToString("yyyy-MM-dd HH:mm");
}
<style type="text/css">
    .form-control {
        height: 35px !important;
    }
</style>
@using (Html.BeginForm(null, null, FormMethod.Get, new { id = "formEditOffice" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    
    @Html.HiddenFor(model => model.OfficeID)
    @Html.HiddenFor(model => model.CreatedBy)
    @Html.Hidden("CreatedDate", data)

    <div class="container">
        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.OfficeTypeID, "Office Type", htmlAttributes: new { @class = "control-label col-md-4 required" })
                    <div class="col-md-10">
                        @Html.DropDownList("OfficeTypeID", null, htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.OfficeName, htmlAttributes: new { @class = "control-label col-md-4 required" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OfficeName, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.LocationID, "Location", htmlAttributes: new { @class = "control-label col-md-4 required" })
                    <div class="col-md-10">
                        @Html.DropDownList("LocationID", null, htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.CheckIn, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CheckIn, new { htmlAttributes = new { @class = "form-control", id = "txtCheckIn" } })
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.CheckOut, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CheckOut, new { htmlAttributes = new { @class = "form-control", id = "txtCheckOut" } })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.CGST, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CGST, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.SGST, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SGST, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="button" value="Update" class="btn btn-success" onclick="updateOffice();" />
        </div>
    </div>
</div>
}

<div>
    <button onclick="OpenOffices();" class="BackList">Back to List</button>
</div>

<script type="text/javascript">
    $(function () {
        if ($('#myModalContent').html() != "") {
            EditTimePicker('@(Model.CheckIn)','@(Model.CheckOut)');
        }
    });
</script>