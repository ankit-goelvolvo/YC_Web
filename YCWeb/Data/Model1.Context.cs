//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YCWeb.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class YCEntities : DbContext
    {
        public YCEntities()
            : base("name=YCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Billing> Billings { get; set; }
        public virtual DbSet<HotelBooking> HotelBookings { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<OfficeFacility> OfficeFacilities { get; set; }
        public virtual DbSet<Office> Offices { get; set; }
        public virtual DbSet<OfficeType> OfficeTypes { get; set; }
        public virtual DbSet<Policy> Policies { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoomAmenity> RoomAmenities { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<RoomType> RoomTypes { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsersLogin> UsersLogins { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Verification> Verifications { get; set; }
        public virtual DbSet<ActionLog> ActionLogs { get; set; }
        public virtual DbSet<RoomTypeOption> RoomTypeOptions { get; set; }
        public virtual DbSet<RoomTypeOptionsFacility> RoomTypeOptionsFacilities { get; set; }
    
        public virtual ObjectResult<AddBilling_Result> AddBilling(Nullable<int> billingID, Nullable<int> hotelBookingID, Nullable<System.DateTime> billingDate, Nullable<decimal> price, Nullable<decimal> taxAmount, Nullable<decimal> totalAmount, Nullable<int> userID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var billingIDParameter = billingID.HasValue ?
                new ObjectParameter("BillingID", billingID) :
                new ObjectParameter("BillingID", typeof(int));
    
            var hotelBookingIDParameter = hotelBookingID.HasValue ?
                new ObjectParameter("HotelBookingID", hotelBookingID) :
                new ObjectParameter("HotelBookingID", typeof(int));
    
            var billingDateParameter = billingDate.HasValue ?
                new ObjectParameter("BillingDate", billingDate) :
                new ObjectParameter("BillingDate", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddBilling_Result>("AddBilling", billingIDParameter, hotelBookingIDParameter, billingDateParameter, priceParameter, taxAmountParameter, totalAmountParameter, userIDParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddHotelBooking_Result> AddHotelBooking(Nullable<int> hotelBookingID, Nullable<int> officeID, Nullable<int> userID, Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut, Nullable<int> bookingStatusID, Nullable<bool> paymentStatus, Nullable<int> roomID, Nullable<int> adults, Nullable<int> children, Nullable<decimal> totalAmount, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var hotelBookingIDParameter = hotelBookingID.HasValue ?
                new ObjectParameter("HotelBookingID", hotelBookingID) :
                new ObjectParameter("HotelBookingID", typeof(int));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            var bookingStatusIDParameter = bookingStatusID.HasValue ?
                new ObjectParameter("BookingStatusID", bookingStatusID) :
                new ObjectParameter("BookingStatusID", typeof(int));
    
            var paymentStatusParameter = paymentStatus.HasValue ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(bool));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var adultsParameter = adults.HasValue ?
                new ObjectParameter("Adults", adults) :
                new ObjectParameter("Adults", typeof(int));
    
            var childrenParameter = children.HasValue ?
                new ObjectParameter("Children", children) :
                new ObjectParameter("Children", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddHotelBooking_Result>("AddHotelBooking", hotelBookingIDParameter, officeIDParameter, userIDParameter, checkInParameter, checkOutParameter, bookingStatusIDParameter, paymentStatusParameter, roomIDParameter, adultsParameter, childrenParameter, totalAmountParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddLocation_Result> AddLocation(Nullable<int> locationID, string locationName, string latitude, string longitude, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddLocation_Result>("AddLocation", locationIDParameter, locationNameParameter, latitudeParameter, longitudeParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<AddOffice_Result> AddOffice(Nullable<int> officeID, Nullable<int> officeTypeID, string officeName, Nullable<int> locationID, string address, string phone, string email, Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var officeTypeIDParameter = officeTypeID.HasValue ?
                new ObjectParameter("OfficeTypeID", officeTypeID) :
                new ObjectParameter("OfficeTypeID", typeof(int));
    
            var officeNameParameter = officeName != null ?
                new ObjectParameter("OfficeName", officeName) :
                new ObjectParameter("OfficeName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(decimal));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddOffice_Result>("AddOffice", officeIDParameter, officeTypeIDParameter, officeNameParameter, locationIDParameter, addressParameter, phoneParameter, emailParameter, checkInParameter, checkOutParameter, cGSTParameter, sGSTParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddOfficeFacilities_Result> AddOfficeFacilities(Nullable<int> officeFacilityID, string officeFacilityName, string description, Nullable<int> officeID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var officeFacilityIDParameter = officeFacilityID.HasValue ?
                new ObjectParameter("OfficeFacilityID", officeFacilityID) :
                new ObjectParameter("OfficeFacilityID", typeof(int));
    
            var officeFacilityNameParameter = officeFacilityName != null ?
                new ObjectParameter("OfficeFacilityName", officeFacilityName) :
                new ObjectParameter("OfficeFacilityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddOfficeFacilities_Result>("AddOfficeFacilities", officeFacilityIDParameter, officeFacilityNameParameter, descriptionParameter, officeIDParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddOfficeType_Result> AddOfficeType(Nullable<int> officeTypeID, string officeTypeName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var officeTypeIDParameter = officeTypeID.HasValue ?
                new ObjectParameter("OfficeTypeID", officeTypeID) :
                new ObjectParameter("OfficeTypeID", typeof(int));
    
            var officeTypeNameParameter = officeTypeName != null ?
                new ObjectParameter("OfficeTypeName", officeTypeName) :
                new ObjectParameter("OfficeTypeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddOfficeType_Result>("AddOfficeType", officeTypeIDParameter, officeTypeNameParameter, descriptionParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddPolicies_Result> AddPolicies(Nullable<int> policyID, string policyName, string description, Nullable<int> officeID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var policyIDParameter = policyID.HasValue ?
                new ObjectParameter("PolicyID", policyID) :
                new ObjectParameter("PolicyID", typeof(int));
    
            var policyNameParameter = policyName != null ?
                new ObjectParameter("PolicyName", policyName) :
                new ObjectParameter("PolicyName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddPolicies_Result>("AddPolicies", policyIDParameter, policyNameParameter, descriptionParameter, officeIDParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddRoles_Result> AddRoles(Nullable<int> roleID, string roleName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddRoles_Result>("AddRoles", roleIDParameter, roleNameParameter, descriptionParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<AddRoomAmenities_Result> AddRoomAmenities(Nullable<int> roomAmenitiesID, Nullable<int> roomTypeID, string roomAmenitiesName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var roomAmenitiesIDParameter = roomAmenitiesID.HasValue ?
                new ObjectParameter("RoomAmenitiesID", roomAmenitiesID) :
                new ObjectParameter("RoomAmenitiesID", typeof(int));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var roomAmenitiesNameParameter = roomAmenitiesName != null ?
                new ObjectParameter("RoomAmenitiesName", roomAmenitiesName) :
                new ObjectParameter("RoomAmenitiesName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddRoomAmenities_Result>("AddRoomAmenities", roomAmenitiesIDParameter, roomTypeIDParameter, roomAmenitiesNameParameter, descriptionParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddRooms_Result> AddRooms(Nullable<int> roomID, string roomName, string description, Nullable<int> roomTypeID, Nullable<int> roomTypeOptionID, Nullable<int> maxAdults, Nullable<int> maxChildren, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var roomTypeOptionIDParameter = roomTypeOptionID.HasValue ?
                new ObjectParameter("RoomTypeOptionID", roomTypeOptionID) :
                new ObjectParameter("RoomTypeOptionID", typeof(int));
    
            var maxAdultsParameter = maxAdults.HasValue ?
                new ObjectParameter("MaxAdults", maxAdults) :
                new ObjectParameter("MaxAdults", typeof(int));
    
            var maxChildrenParameter = maxChildren.HasValue ?
                new ObjectParameter("MaxChildren", maxChildren) :
                new ObjectParameter("MaxChildren", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddRooms_Result>("AddRooms", roomIDParameter, roomNameParameter, descriptionParameter, roomTypeIDParameter, roomTypeOptionIDParameter, maxAdultsParameter, maxChildrenParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddRoomTypeOption_Result> AddRoomTypeOption(Nullable<int> roomTypeOptionID, Nullable<int> officeFacilityID, Nullable<int> roomTypeID, Nullable<decimal> price, Nullable<bool> isRefundable, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var roomTypeOptionIDParameter = roomTypeOptionID.HasValue ?
                new ObjectParameter("RoomTypeOptionID", roomTypeOptionID) :
                new ObjectParameter("RoomTypeOptionID", typeof(int));
    
            var officeFacilityIDParameter = officeFacilityID.HasValue ?
                new ObjectParameter("OfficeFacilityID", officeFacilityID) :
                new ObjectParameter("OfficeFacilityID", typeof(int));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var isRefundableParameter = isRefundable.HasValue ?
                new ObjectParameter("IsRefundable", isRefundable) :
                new ObjectParameter("IsRefundable", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddRoomTypeOption_Result>("AddRoomTypeOption", roomTypeOptionIDParameter, officeFacilityIDParameter, roomTypeIDParameter, priceParameter, isRefundableParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddRoomTypes_Result> AddRoomTypes(Nullable<int> roomTypeID, string roomTypeName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var roomTypeNameParameter = roomTypeName != null ?
                new ObjectParameter("RoomTypeName", roomTypeName) :
                new ObjectParameter("RoomTypeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddRoomTypes_Result>("AddRoomTypes", roomTypeIDParameter, roomTypeNameParameter, descriptionParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddStatus_Result> AddStatus(Nullable<int> statusID, string statusName, string desccription, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var desccriptionParameter = desccription != null ?
                new ObjectParameter("Desccription", desccription) :
                new ObjectParameter("Desccription", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddStatus_Result>("AddStatus", statusIDParameter, statusNameParameter, desccriptionParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<AddUserRoles_Result> AddUserRoles(Nullable<int> userRoleID, Nullable<int> roleID, Nullable<int> userID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy)
        {
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUserRoles_Result>("AddUserRoles", userRoleIDParameter, roleIDParameter, userIDParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<AddUsers_Result> AddUsers(Nullable<int> userID, Nullable<int> userTypeId, string firstName, string lastName, string email, string mobile, string phone, string address, Nullable<System.DateTime> dateOfBirth, Nullable<bool> isActive, string gender, string photo, string memberId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUsers_Result>("AddUsers", userIDParameter, userTypeIdParameter, firstNameParameter, lastNameParameter, emailParameter, mobileParameter, phoneParameter, addressParameter, dateOfBirthParameter, isActiveParameter, genderParameter, photoParameter, memberIdParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<AddUsersLogin_Result> AddUsersLogin(Nullable<int> usersLoginID, Nullable<int> userID, string password, Nullable<System.DateTime> lastLoginDateTime, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy)
        {
            var usersLoginIDParameter = usersLoginID.HasValue ?
                new ObjectParameter("UsersLoginID", usersLoginID) :
                new ObjectParameter("UsersLoginID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var lastLoginDateTimeParameter = lastLoginDateTime.HasValue ?
                new ObjectParameter("LastLoginDateTime", lastLoginDateTime) :
                new ObjectParameter("LastLoginDateTime", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUsersLogin_Result>("AddUsersLogin", usersLoginIDParameter, userIDParameter, passwordParameter, lastLoginDateTimeParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<AddUserType_Result> AddUserType(Nullable<int> userTypeId, string userTypeName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var userTypeNameParameter = userTypeName != null ?
                new ObjectParameter("UserTypeName", userTypeName) :
                new ObjectParameter("UserTypeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUserType_Result>("AddUserType", userTypeIdParameter, userTypeNameParameter, descriptionParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter);
        }
    
        public virtual int DeleteBilling(Nullable<int> original_BillingID)
        {
            var original_BillingIDParameter = original_BillingID.HasValue ?
                new ObjectParameter("Original_BillingID", original_BillingID) :
                new ObjectParameter("Original_BillingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBilling", original_BillingIDParameter);
        }
    
        public virtual int DeleteHotelBooking(Nullable<int> original_HotelBookingID)
        {
            var original_HotelBookingIDParameter = original_HotelBookingID.HasValue ?
                new ObjectParameter("Original_HotelBookingID", original_HotelBookingID) :
                new ObjectParameter("Original_HotelBookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHotelBooking", original_HotelBookingIDParameter);
        }
    
        public virtual int DeleteLocation(Nullable<int> original_LocationID)
        {
            var original_LocationIDParameter = original_LocationID.HasValue ?
                new ObjectParameter("Original_LocationID", original_LocationID) :
                new ObjectParameter("Original_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLocation", original_LocationIDParameter);
        }
    
        public virtual int DeleteOffice(Nullable<int> original_OfficeID)
        {
            var original_OfficeIDParameter = original_OfficeID.HasValue ?
                new ObjectParameter("Original_OfficeID", original_OfficeID) :
                new ObjectParameter("Original_OfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOffice", original_OfficeIDParameter);
        }
    
        public virtual int DeleteOfficeFacilities(Nullable<int> original_OfficeFacilityID)
        {
            var original_OfficeFacilityIDParameter = original_OfficeFacilityID.HasValue ?
                new ObjectParameter("Original_OfficeFacilityID", original_OfficeFacilityID) :
                new ObjectParameter("Original_OfficeFacilityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOfficeFacilities", original_OfficeFacilityIDParameter);
        }
    
        public virtual int DeleteOfficeType(Nullable<int> original_OfficeTypeID)
        {
            var original_OfficeTypeIDParameter = original_OfficeTypeID.HasValue ?
                new ObjectParameter("Original_OfficeTypeID", original_OfficeTypeID) :
                new ObjectParameter("Original_OfficeTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOfficeType", original_OfficeTypeIDParameter);
        }
    
        public virtual int DeletePolicies(Nullable<int> original_PolicyID)
        {
            var original_PolicyIDParameter = original_PolicyID.HasValue ?
                new ObjectParameter("Original_PolicyID", original_PolicyID) :
                new ObjectParameter("Original_PolicyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePolicies", original_PolicyIDParameter);
        }
    
        public virtual int DeleteRoles(Nullable<int> original_RoleID)
        {
            var original_RoleIDParameter = original_RoleID.HasValue ?
                new ObjectParameter("Original_RoleID", original_RoleID) :
                new ObjectParameter("Original_RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoles", original_RoleIDParameter);
        }
    
        public virtual int DeleteRoomAmenities(Nullable<int> original_RoomAmenitiesID)
        {
            var original_RoomAmenitiesIDParameter = original_RoomAmenitiesID.HasValue ?
                new ObjectParameter("Original_RoomAmenitiesID", original_RoomAmenitiesID) :
                new ObjectParameter("Original_RoomAmenitiesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoomAmenities", original_RoomAmenitiesIDParameter);
        }
    
        public virtual int DeleteRooms(Nullable<int> original_RoomID)
        {
            var original_RoomIDParameter = original_RoomID.HasValue ?
                new ObjectParameter("Original_RoomID", original_RoomID) :
                new ObjectParameter("Original_RoomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRooms", original_RoomIDParameter);
        }
    
        public virtual int DeleteRoomTypeOption(Nullable<int> original_RoomTypeOptionID)
        {
            var original_RoomTypeOptionIDParameter = original_RoomTypeOptionID.HasValue ?
                new ObjectParameter("Original_RoomTypeOptionID", original_RoomTypeOptionID) :
                new ObjectParameter("Original_RoomTypeOptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoomTypeOption", original_RoomTypeOptionIDParameter);
        }
    
        public virtual int DeleteRoomTypes(Nullable<int> original_RoomTypeID)
        {
            var original_RoomTypeIDParameter = original_RoomTypeID.HasValue ?
                new ObjectParameter("Original_RoomTypeID", original_RoomTypeID) :
                new ObjectParameter("Original_RoomTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoomTypes", original_RoomTypeIDParameter);
        }
    
        public virtual int DeleteStatus(Nullable<int> original_StatusID)
        {
            var original_StatusIDParameter = original_StatusID.HasValue ?
                new ObjectParameter("Original_StatusID", original_StatusID) :
                new ObjectParameter("Original_StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStatus", original_StatusIDParameter);
        }
    
        public virtual int DeleteUserRoles(Nullable<int> original_UserRoleID)
        {
            var original_UserRoleIDParameter = original_UserRoleID.HasValue ?
                new ObjectParameter("Original_UserRoleID", original_UserRoleID) :
                new ObjectParameter("Original_UserRoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserRoles", original_UserRoleIDParameter);
        }
    
        public virtual int DeleteUsers(Nullable<int> original_UserID)
        {
            var original_UserIDParameter = original_UserID.HasValue ?
                new ObjectParameter("Original_UserID", original_UserID) :
                new ObjectParameter("Original_UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUsers", original_UserIDParameter);
        }
    
        public virtual int DeleteUsersLogin(Nullable<int> original_UsersLoginID)
        {
            var original_UsersLoginIDParameter = original_UsersLoginID.HasValue ?
                new ObjectParameter("Original_UsersLoginID", original_UsersLoginID) :
                new ObjectParameter("Original_UsersLoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUsersLogin", original_UsersLoginIDParameter);
        }
    
        public virtual int DeleteUserType(Nullable<int> original_UserTypeId)
        {
            var original_UserTypeIdParameter = original_UserTypeId.HasValue ?
                new ObjectParameter("Original_UserTypeId", original_UserTypeId) :
                new ObjectParameter("Original_UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserType", original_UserTypeIdParameter);
        }
    
        public virtual ObjectResult<GetAllBilling_Result> GetAllBilling()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBilling_Result>("GetAllBilling");
        }
    
        public virtual ObjectResult<GetAllHotelBooking_Result> GetAllHotelBooking()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllHotelBooking_Result>("GetAllHotelBooking");
        }
    
        public virtual ObjectResult<GetAllLocation_Result> GetAllLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLocation_Result>("GetAllLocation");
        }
    
        public virtual ObjectResult<GetAllOfficeFacilities_Result> GetAllOfficeFacilities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOfficeFacilities_Result>("GetAllOfficeFacilities");
        }
    
        public virtual ObjectResult<GetAllOffices_Result> GetAllOffices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOffices_Result>("GetAllOffices");
        }
    
        public virtual ObjectResult<GetAllOfficeType_Result> GetAllOfficeType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOfficeType_Result>("GetAllOfficeType");
        }
    
        public virtual ObjectResult<GetAllPolicies_Result> GetAllPolicies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPolicies_Result>("GetAllPolicies");
        }
    
        public virtual ObjectResult<GetAllRoles_Result> GetAllRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoles_Result>("GetAllRoles");
        }
    
        public virtual ObjectResult<GetAllRoomAmenities_Result> GetAllRoomAmenities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoomAmenities_Result>("GetAllRoomAmenities");
        }
    
        public virtual ObjectResult<GetAllRooms_Result> GetAllRooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRooms_Result>("GetAllRooms");
        }
    
        public virtual ObjectResult<GetAllRoomTypeOptions_Result> GetAllRoomTypeOptions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoomTypeOptions_Result>("GetAllRoomTypeOptions");
        }
    
        public virtual ObjectResult<GetAllRoomTypes_Result> GetAllRoomTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoomTypes_Result>("GetAllRoomTypes");
        }
    
        public virtual ObjectResult<GetAllStatus_Result> GetAllStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStatus_Result>("GetAllStatus");
        }
    
        public virtual ObjectResult<GetAllUserRoles_Result> GetAllUserRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserRoles_Result>("GetAllUserRoles");
        }
    
        public virtual ObjectResult<GetAllUsers_Result> GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUsers_Result>("GetAllUsers");
        }
    
        public virtual ObjectResult<GetAllUsersLogin_Result> GetAllUsersLogin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUsersLogin_Result>("GetAllUsersLogin");
        }
    
        public virtual ObjectResult<GetAllUserType_Result> GetAllUserType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserType_Result>("GetAllUserType");
        }
    
        public virtual ObjectResult<UpdateBilling_Result> UpdateBilling(Nullable<int> billingID, Nullable<int> hotelBookingID, Nullable<System.DateTime> billingDate, Nullable<decimal> price, Nullable<decimal> taxAmount, Nullable<decimal> totalAmount, Nullable<int> userID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_BillingID)
        {
            var billingIDParameter = billingID.HasValue ?
                new ObjectParameter("BillingID", billingID) :
                new ObjectParameter("BillingID", typeof(int));
    
            var hotelBookingIDParameter = hotelBookingID.HasValue ?
                new ObjectParameter("HotelBookingID", hotelBookingID) :
                new ObjectParameter("HotelBookingID", typeof(int));
    
            var billingDateParameter = billingDate.HasValue ?
                new ObjectParameter("BillingDate", billingDate) :
                new ObjectParameter("BillingDate", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_BillingIDParameter = original_BillingID.HasValue ?
                new ObjectParameter("Original_BillingID", original_BillingID) :
                new ObjectParameter("Original_BillingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateBilling_Result>("UpdateBilling", billingIDParameter, hotelBookingIDParameter, billingDateParameter, priceParameter, taxAmountParameter, totalAmountParameter, userIDParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_BillingIDParameter);
        }
    
        public virtual ObjectResult<UpdateHotelBooking_Result> UpdateHotelBooking(Nullable<int> hotelBookingID, Nullable<int> officeID, Nullable<int> userID, Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut, Nullable<int> bookingStatusID, Nullable<bool> paymentStatus, Nullable<int> roomID, Nullable<int> adults, Nullable<int> children, Nullable<decimal> totalAmount, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_HotelBookingID)
        {
            var hotelBookingIDParameter = hotelBookingID.HasValue ?
                new ObjectParameter("HotelBookingID", hotelBookingID) :
                new ObjectParameter("HotelBookingID", typeof(int));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            var bookingStatusIDParameter = bookingStatusID.HasValue ?
                new ObjectParameter("BookingStatusID", bookingStatusID) :
                new ObjectParameter("BookingStatusID", typeof(int));
    
            var paymentStatusParameter = paymentStatus.HasValue ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(bool));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var adultsParameter = adults.HasValue ?
                new ObjectParameter("Adults", adults) :
                new ObjectParameter("Adults", typeof(int));
    
            var childrenParameter = children.HasValue ?
                new ObjectParameter("Children", children) :
                new ObjectParameter("Children", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_HotelBookingIDParameter = original_HotelBookingID.HasValue ?
                new ObjectParameter("Original_HotelBookingID", original_HotelBookingID) :
                new ObjectParameter("Original_HotelBookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateHotelBooking_Result>("UpdateHotelBooking", hotelBookingIDParameter, officeIDParameter, userIDParameter, checkInParameter, checkOutParameter, bookingStatusIDParameter, paymentStatusParameter, roomIDParameter, adultsParameter, childrenParameter, totalAmountParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_HotelBookingIDParameter);
        }
    
        public virtual ObjectResult<UpdateLocation_Result> UpdateLocation(Nullable<int> locationID, string locationName, string latitude, string longitude, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, Nullable<int> original_LocationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var original_LocationIDParameter = original_LocationID.HasValue ?
                new ObjectParameter("Original_LocationID", original_LocationID) :
                new ObjectParameter("Original_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateLocation_Result>("UpdateLocation", locationIDParameter, locationNameParameter, latitudeParameter, longitudeParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter, original_LocationIDParameter);
        }
    
        public virtual ObjectResult<UpdateOffice_Result> UpdateOffice(Nullable<int> officeID, Nullable<int> officeTypeID, string officeName, Nullable<int> locationID, string address, string phone, string email, Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_OfficeID)
        {
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var officeTypeIDParameter = officeTypeID.HasValue ?
                new ObjectParameter("OfficeTypeID", officeTypeID) :
                new ObjectParameter("OfficeTypeID", typeof(int));
    
            var officeNameParameter = officeName != null ?
                new ObjectParameter("OfficeName", officeName) :
                new ObjectParameter("OfficeName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(decimal));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_OfficeIDParameter = original_OfficeID.HasValue ?
                new ObjectParameter("Original_OfficeID", original_OfficeID) :
                new ObjectParameter("Original_OfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateOffice_Result>("UpdateOffice", officeIDParameter, officeTypeIDParameter, officeNameParameter, locationIDParameter, addressParameter, phoneParameter, emailParameter, checkInParameter, checkOutParameter, cGSTParameter, sGSTParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_OfficeIDParameter);
        }
    
        public virtual ObjectResult<UpdateOfficeFacilities_Result> UpdateOfficeFacilities(Nullable<int> officeFacilityID, string officeFacilityName, string description, Nullable<int> officeID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_OfficeFacilityID)
        {
            var officeFacilityIDParameter = officeFacilityID.HasValue ?
                new ObjectParameter("OfficeFacilityID", officeFacilityID) :
                new ObjectParameter("OfficeFacilityID", typeof(int));
    
            var officeFacilityNameParameter = officeFacilityName != null ?
                new ObjectParameter("OfficeFacilityName", officeFacilityName) :
                new ObjectParameter("OfficeFacilityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_OfficeFacilityIDParameter = original_OfficeFacilityID.HasValue ?
                new ObjectParameter("Original_OfficeFacilityID", original_OfficeFacilityID) :
                new ObjectParameter("Original_OfficeFacilityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateOfficeFacilities_Result>("UpdateOfficeFacilities", officeFacilityIDParameter, officeFacilityNameParameter, descriptionParameter, officeIDParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_OfficeFacilityIDParameter);
        }
    
        public virtual ObjectResult<UpdateOfficeType_Result> UpdateOfficeType(Nullable<int> officeTypeID, string officeTypeName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_OfficeTypeID)
        {
            var officeTypeIDParameter = officeTypeID.HasValue ?
                new ObjectParameter("OfficeTypeID", officeTypeID) :
                new ObjectParameter("OfficeTypeID", typeof(int));
    
            var officeTypeNameParameter = officeTypeName != null ?
                new ObjectParameter("OfficeTypeName", officeTypeName) :
                new ObjectParameter("OfficeTypeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_OfficeTypeIDParameter = original_OfficeTypeID.HasValue ?
                new ObjectParameter("Original_OfficeTypeID", original_OfficeTypeID) :
                new ObjectParameter("Original_OfficeTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateOfficeType_Result>("UpdateOfficeType", officeTypeIDParameter, officeTypeNameParameter, descriptionParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_OfficeTypeIDParameter);
        }
    
        public virtual ObjectResult<UpdatePolicies_Result> UpdatePolicies(Nullable<int> policyID, string policyName, string description, Nullable<int> officeID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_PolicyID)
        {
            var policyIDParameter = policyID.HasValue ?
                new ObjectParameter("PolicyID", policyID) :
                new ObjectParameter("PolicyID", typeof(int));
    
            var policyNameParameter = policyName != null ?
                new ObjectParameter("PolicyName", policyName) :
                new ObjectParameter("PolicyName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_PolicyIDParameter = original_PolicyID.HasValue ?
                new ObjectParameter("Original_PolicyID", original_PolicyID) :
                new ObjectParameter("Original_PolicyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdatePolicies_Result>("UpdatePolicies", policyIDParameter, policyNameParameter, descriptionParameter, officeIDParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_PolicyIDParameter);
        }
    
        public virtual ObjectResult<UpdateRoles_Result> UpdateRoles(Nullable<int> roleID, string roleName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, Nullable<int> original_RoleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var original_RoleIDParameter = original_RoleID.HasValue ?
                new ObjectParameter("Original_RoleID", original_RoleID) :
                new ObjectParameter("Original_RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateRoles_Result>("UpdateRoles", roleIDParameter, roleNameParameter, descriptionParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter, original_RoleIDParameter);
        }
    
        public virtual ObjectResult<UpdateRoomAmenities_Result> UpdateRoomAmenities(Nullable<int> roomAmenitiesID, Nullable<int> roomTypeID, string roomAmenitiesName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_RoomAmenitiesID)
        {
            var roomAmenitiesIDParameter = roomAmenitiesID.HasValue ?
                new ObjectParameter("RoomAmenitiesID", roomAmenitiesID) :
                new ObjectParameter("RoomAmenitiesID", typeof(int));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var roomAmenitiesNameParameter = roomAmenitiesName != null ?
                new ObjectParameter("RoomAmenitiesName", roomAmenitiesName) :
                new ObjectParameter("RoomAmenitiesName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_RoomAmenitiesIDParameter = original_RoomAmenitiesID.HasValue ?
                new ObjectParameter("Original_RoomAmenitiesID", original_RoomAmenitiesID) :
                new ObjectParameter("Original_RoomAmenitiesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateRoomAmenities_Result>("UpdateRoomAmenities", roomAmenitiesIDParameter, roomTypeIDParameter, roomAmenitiesNameParameter, descriptionParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_RoomAmenitiesIDParameter);
        }
    
        public virtual ObjectResult<UpdateRooms_Result> UpdateRooms(Nullable<int> roomID, string roomName, string description, Nullable<int> roomTypeID, Nullable<int> roomTypeOptionID, Nullable<int> maxAdults, Nullable<int> maxChildren, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_RoomID)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var roomTypeOptionIDParameter = roomTypeOptionID.HasValue ?
                new ObjectParameter("RoomTypeOptionID", roomTypeOptionID) :
                new ObjectParameter("RoomTypeOptionID", typeof(int));
    
            var maxAdultsParameter = maxAdults.HasValue ?
                new ObjectParameter("MaxAdults", maxAdults) :
                new ObjectParameter("MaxAdults", typeof(int));
    
            var maxChildrenParameter = maxChildren.HasValue ?
                new ObjectParameter("MaxChildren", maxChildren) :
                new ObjectParameter("MaxChildren", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_RoomIDParameter = original_RoomID.HasValue ?
                new ObjectParameter("Original_RoomID", original_RoomID) :
                new ObjectParameter("Original_RoomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateRooms_Result>("UpdateRooms", roomIDParameter, roomNameParameter, descriptionParameter, roomTypeIDParameter, roomTypeOptionIDParameter, maxAdultsParameter, maxChildrenParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_RoomIDParameter);
        }
    
        public virtual ObjectResult<UpdateRoomTypeOption_Result> UpdateRoomTypeOption(Nullable<int> roomTypeOptionID, Nullable<int> officeFacilityID, Nullable<int> roomTypeID, Nullable<decimal> price, Nullable<bool> isRefundable, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_RoomTypeOptionID)
        {
            var roomTypeOptionIDParameter = roomTypeOptionID.HasValue ?
                new ObjectParameter("RoomTypeOptionID", roomTypeOptionID) :
                new ObjectParameter("RoomTypeOptionID", typeof(int));
    
            var officeFacilityIDParameter = officeFacilityID.HasValue ?
                new ObjectParameter("OfficeFacilityID", officeFacilityID) :
                new ObjectParameter("OfficeFacilityID", typeof(int));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var isRefundableParameter = isRefundable.HasValue ?
                new ObjectParameter("IsRefundable", isRefundable) :
                new ObjectParameter("IsRefundable", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_RoomTypeOptionIDParameter = original_RoomTypeOptionID.HasValue ?
                new ObjectParameter("Original_RoomTypeOptionID", original_RoomTypeOptionID) :
                new ObjectParameter("Original_RoomTypeOptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateRoomTypeOption_Result>("UpdateRoomTypeOption", roomTypeOptionIDParameter, officeFacilityIDParameter, roomTypeIDParameter, priceParameter, isRefundableParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_RoomTypeOptionIDParameter);
        }
    
        public virtual ObjectResult<UpdateRoomtypes_Result> UpdateRoomtypes(Nullable<int> roomTypeID, string roomTypeName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_RoomTypeID)
        {
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var roomTypeNameParameter = roomTypeName != null ?
                new ObjectParameter("RoomTypeName", roomTypeName) :
                new ObjectParameter("RoomTypeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_RoomTypeIDParameter = original_RoomTypeID.HasValue ?
                new ObjectParameter("Original_RoomTypeID", original_RoomTypeID) :
                new ObjectParameter("Original_RoomTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateRoomtypes_Result>("UpdateRoomtypes", roomTypeIDParameter, roomTypeNameParameter, descriptionParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_RoomTypeIDParameter);
        }
    
        public virtual ObjectResult<UpdateStatus_Result> UpdateStatus(Nullable<int> statusID, string statusName, string desccription, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, Nullable<int> original_StatusID)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var desccriptionParameter = desccription != null ?
                new ObjectParameter("Desccription", desccription) :
                new ObjectParameter("Desccription", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var original_StatusIDParameter = original_StatusID.HasValue ?
                new ObjectParameter("Original_StatusID", original_StatusID) :
                new ObjectParameter("Original_StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateStatus_Result>("UpdateStatus", statusIDParameter, statusNameParameter, desccriptionParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, original_StatusIDParameter);
        }
    
        public virtual ObjectResult<UpdateUserRoles_Result> UpdateUserRoles(Nullable<int> userRoleID, Nullable<int> roleID, Nullable<int> userID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, Nullable<int> original_UserRoleID)
        {
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var original_UserRoleIDParameter = original_UserRoleID.HasValue ?
                new ObjectParameter("Original_UserRoleID", original_UserRoleID) :
                new ObjectParameter("Original_UserRoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateUserRoles_Result>("UpdateUserRoles", userRoleIDParameter, roleIDParameter, userIDParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter, original_UserRoleIDParameter);
        }
    
        public virtual ObjectResult<UpdateUsers_Result> UpdateUsers(Nullable<int> userID, Nullable<int> userTypeId, string firstName, string lastName, string email, string mobile, string phone, string address, Nullable<System.DateTime> dateOfBirth, Nullable<bool> isActive, string gender, string photo, string memberId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, Nullable<int> original_UserID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var original_UserIDParameter = original_UserID.HasValue ?
                new ObjectParameter("Original_UserID", original_UserID) :
                new ObjectParameter("Original_UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateUsers_Result>("UpdateUsers", userIDParameter, userTypeIdParameter, firstNameParameter, lastNameParameter, emailParameter, mobileParameter, phoneParameter, addressParameter, dateOfBirthParameter, isActiveParameter, genderParameter, photoParameter, memberIdParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter, original_UserIDParameter);
        }
    
        public virtual ObjectResult<UpdateUsersLogin_Result> UpdateUsersLogin(Nullable<int> usersLoginID, Nullable<int> userID, string password, Nullable<System.DateTime> lastLoginDateTime, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, Nullable<int> original_UsersLoginID)
        {
            var usersLoginIDParameter = usersLoginID.HasValue ?
                new ObjectParameter("UsersLoginID", usersLoginID) :
                new ObjectParameter("UsersLoginID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var lastLoginDateTimeParameter = lastLoginDateTime.HasValue ?
                new ObjectParameter("LastLoginDateTime", lastLoginDateTime) :
                new ObjectParameter("LastLoginDateTime", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var original_UsersLoginIDParameter = original_UsersLoginID.HasValue ?
                new ObjectParameter("Original_UsersLoginID", original_UsersLoginID) :
                new ObjectParameter("Original_UsersLoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateUsersLogin_Result>("UpdateUsersLogin", usersLoginIDParameter, userIDParameter, passwordParameter, lastLoginDateTimeParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter, original_UsersLoginIDParameter);
        }
    
        public virtual ObjectResult<UpdateUsertype_Result> UpdateUsertype(Nullable<int> userTypeId, string userTypeName, string description, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, Nullable<int> original_UserTypeId)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var userTypeNameParameter = userTypeName != null ?
                new ObjectParameter("UserTypeName", userTypeName) :
                new ObjectParameter("UserTypeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var original_UserTypeIdParameter = original_UserTypeId.HasValue ?
                new ObjectParameter("Original_UserTypeId", original_UserTypeId) :
                new ObjectParameter("Original_UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateUsertype_Result>("UpdateUsertype", userTypeIdParameter, userTypeNameParameter, descriptionParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter, original_UserTypeIdParameter);
        }
    }
}
